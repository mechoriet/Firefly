From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 13 Apr 2019 20:13:53 +0300
Subject: [PATCH] Make packet manipulation easier


diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/network/ChannelHolder.java b/api/src/main/java/eu/mikroskeem/firefly/api/network/ChannelHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..0bc586e751d03c98c250d9d647366274627deea1
--- /dev/null
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/network/ChannelHolder.java
@@ -0,0 +1,10 @@
+package eu.mikroskeem.firefly.api.network;
+
+import io.netty.channel.Channel;
+
+/**
+ * @author Mark Vainomaa
+ */
+public interface ChannelHolder {
+    Channel getChannel();
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
index f59b49c78b4e95ffa9f074c34afea165a7f8fd6a..a779bc9aee2eed5d960ba4d90a1b0af2353fd346 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
@@ -10,7 +10,7 @@ import net.md_5.bungee.protocol.DefinedPacket;
  * It should expose information about the remote peer, however not be specific
  * to a type of connection, whether server or player.
  */
-public interface Connection
+public interface Connection extends eu.mikroskeem.firefly.api.network.ChannelHolder // Firefly - make packet manipulation easier
 {
 
     /**
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 546564fbee55ccf84d866d3c623583a451a937d2..eb4972c59949e27441f66b22c2aa01e0608d7cb2 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -408,8 +408,8 @@ public enum Protocol
     /*========================================================================*/
     public static final int MAX_PACKET_ID = 0xFF;
     /*========================================================================*/
-    final DirectionData TO_SERVER = new DirectionData( this, ProtocolConstants.Direction.TO_SERVER );
-    final DirectionData TO_CLIENT = new DirectionData( this, ProtocolConstants.Direction.TO_CLIENT );
+    public final DirectionData TO_SERVER = new DirectionData( this, ProtocolConstants.Direction.TO_SERVER ); // Firefly - make packet manipulation easier
+    public final DirectionData TO_CLIENT = new DirectionData( this, ProtocolConstants.Direction.TO_CLIENT ); // Firefly - make packet manipulation easier
 
     public static void main(String[] args)
     {
@@ -446,7 +446,7 @@ public enum Protocol
     }
 
     @Data
-    private static class ProtocolData
+    public static class ProtocolData // Firefly - make packet manipulation easier
     {
 
         private final int protocolVersion;
@@ -455,7 +455,7 @@ public enum Protocol
     }
 
     @Data
-    private static class ProtocolMapping
+    public static class ProtocolMapping // Firefly - make packet manipulation easier
     {
 
         private final int protocolVersion;
@@ -463,16 +463,18 @@ public enum Protocol
     }
 
     // Helper method
-    private static ProtocolMapping map(int protocol, int id)
+    public static ProtocolMapping map(int protocol, int id) // Firefly - make packet manipulation easier
     {
         return new ProtocolMapping( protocol, id );
     }
 
-    static final class DirectionData
+    public static final class DirectionData // Firefly - make packet manipulation easier
     {
 
+        @Getter // Firefly - make packet manipulation easier
         private final TIntObjectMap<ProtocolData> protocols = new TIntObjectHashMap<>();
         //
+        @Getter // Firefly - make packet manipulation easier
         private final Protocol protocolPhase;
         @Getter
         private final ProtocolConstants.Direction direction;
@@ -488,7 +490,7 @@ public enum Protocol
             }
         }
 
-        private ProtocolData getProtocolData(int version)
+        public ProtocolData getProtocolData(int version) // Firefly - make packet manipulation easier
         {
             ProtocolData protocol = protocols.get( version );
             if ( protocol == null && ( protocolPhase != Protocol.GAME ) )
@@ -529,7 +531,7 @@ public enum Protocol
             }
         }
 
-        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, ProtocolMapping... mappings) // Waterfall - speed up packet construction
+        public <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, ProtocolMapping... mappings) // Waterfall - speed up packet construction // Firefly - make packet manipulation easier
         {
             // Waterfall start - speed up packet construction
             /*
@@ -574,7 +576,7 @@ public enum Protocol
              */ // Waterfall end
         }
         // Waterfall start - speed up packet construction (backwards compat)
-        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, ProtocolMapping... mappings) {
+        public <P extends DefinedPacket> void registerPacket(Class<P> packetClass, ProtocolMapping... mappings) { // Firefly - make packet manipulation easier
             java.util.function.Supplier<P> packetSupplier;
             try {
                 Constructor<? extends DefinedPacket> constructor = packetClass.getDeclaredConstructor();
@@ -592,7 +594,7 @@ public enum Protocol
         }
         // Waterfall end
 
-        final int getId(Class<? extends DefinedPacket> packet, int version)
+        public final int getId(Class<? extends DefinedPacket> packet, int version) // Firefly - make packet manipulation easier
         {
 
             ProtocolData protocolData = getProtocolData( version );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 5e452780573fd590348af1eda4eb688ba89539c3..a3485a3392a054d63e865996ada7ee873aa4df58 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -16,7 +16,7 @@ import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 
 @RequiredArgsConstructor
-public class ServerConnection implements Server
+public class ServerConnection implements Server, eu.mikroskeem.firefly.api.network.ChannelHolder // Firefly - make packet manipulation easier
 {
 
     @Getter
@@ -97,4 +97,10 @@ public class ServerConnection implements Server
         private final long id;
         private final long time;
     }
+    // Firefly start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // Firefly end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index bb4e7ec2c7a72d57b48b48248de87f75826c945d..f8c83a79db681f3bc6645bf14a1c1ce1cd4c7f85 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -56,7 +56,7 @@ import net.md_5.bungee.util.BufUtil;
 import net.md_5.bungee.util.QuietException;
 
 @RequiredArgsConstructor
-public class ServerConnector extends PacketHandler
+public class ServerConnector extends PacketHandler implements eu.mikroskeem.firefly.api.network.ChannelHolder // Firefly - make packet manipulation easier
 {
 
     private final ProxyServer bungee;
@@ -475,4 +475,10 @@ public class ServerConnector extends PacketHandler
     {
         return "[" + user.getName() + "|" + user.getAddress() + "] <-> ServerConnector [" + target.getName() + "]";
     }
+    // Firefly start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // Firefly end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 4826f0d56af3e433cf148c3e27521a028e278a10..984ecc1c8c91c2505bb4fe65220d29d8d22033ce 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -67,7 +67,7 @@ import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
 
 @RequiredArgsConstructor
-public final class UserConnection implements ProxiedPlayer
+public final class UserConnection implements ProxiedPlayer, eu.mikroskeem.firefly.api.network.ChannelHolder // Firefly - make packet manipulation easier
 {
 
     /*========================================================================*/
@@ -751,4 +751,10 @@ public final class UserConnection implements ProxiedPlayer
         return entityRewrite == net.md_5.bungee.entitymap.EntityMap_Dummy.INSTANCE;
     }
     // Waterfall end
+    // Firefly start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // Firefly end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index b848e4515723a691693da3811c89927ef42aa727..e59c3bd051eeb8ad57cadd04f518abf69a1603a8 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -668,4 +668,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         return !ch.isClosed();
     }
+    // Firefly start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // Firefly end
 }
